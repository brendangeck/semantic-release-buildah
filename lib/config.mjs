import { parseArrayOrString, toBoolean } from './utils.mjs';

export default function getConfig(pluginConfig) {
    return {
        buildArg: JSON.parse(pluginConfig.buildArg, process.env.BUILD_ARG),
        cache: toBoolean(pluginConfig.cache || process.env.CACHE),
        cacheCopyLayers: toBoolean(pluginConfig.cacheCopyLayers || process.env.CACHE_COPY_LAYERS),
        cacheDir: pluginConfig.cacheDir || process.env.CACHE_DIR,
        cacheRepo: pluginConfig.cacheRepo || process.env.CACHE_REPO,
        cacheRunLayers: toBoolean(pluginConfig.cacheRunLayers || process.env.CACHE_RUN_LAYERS),
        cacheTTL: pluginConfig.cacheTTL || process.env.CACHE_TTL,
        cleanup: toBoolean(pluginConfig.cleanup || process.env.CLEANUP),
        compressedCaching: toBoolean(pluginConfig.compressedCaching || process.env.COMPRESSED_CACHING),
        compression: pluginConfig.compression || process.env.COMPRESSION,
        compressionLevel: parseInt(pluginConfig.compressionLevel || process.env.COMPRESSION_LEVEL),
        context: pluginConfig.context || process.env.CONTEXT,
        contextSubPath: pluginConfig.contextSubPath || process.env.CONTEXT_SUB_PATH,
        customPlatform: pluginConfig.customPlatform || process.env.CUSTOM_PLATFORM,
        destination: parseArrayOrString(pluginConfig.destination, process.env.DESTINATION),
        digestFile: pluginConfig.digestFile || process.env.DIGEST_FILE,
        dockerfile: pluginConfig.dockerfile || process.env.DOCKERFILE,
        force: toBoolean(pluginConfig.force || process.env.FORCE),
        forceBuildMetadata: toBoolean(pluginConfig.forceBuildMetadata || process.env.FORCE_BUILD_METADATA),
        git: JSON.parse(pluginConfig.git, process.env.GIT),
        ignorePath: parseArrayOrString(pluginConfig.ignorePath, process.env.IGNORE_PATH),
        ignoreVarRun: toBoolean(pluginConfig.ignoreVarRun || process.env.IGNORE_VAR_RUN),
        imageDownloadRetry: parseInt(pluginConfig.imageDownloadRetry || process.env.IMAGE_DOWNLOAD_RETRY),
        imageFsExtractRetry: parseInt(pluginConfig.imageFsExtractRetry || process.env.IMAGE_FS_EXTRACT_RETRY),
        imageNameTagWithDigestFile: pluginConfig.imageNameTagWithDigestFile || process.env.IMAGE_NAME_TAG_WITH_DIGEST_FILE,
        imageNameWithDigestFile: pluginConfig.imageNameWithDigestFile || process.env.IMAGE_NAME_WITH_DIGEST_FILE,
        insecure: toBoolean(pluginConfig.insecure || process.env.INSECURE),
        insecurePull: toBoolean(pluginConfig.insecurePull || process.env.INSECURE_PULL),
        insecureRegistry: parseArrayOrString(pluginConfig.insecureRegistry, process.env.INSECURE_REGISTRY),
        kanikoDir: pluginConfig.kanikoDir || process.env.KANIKO_DIR,
        label: JSON.parse(pluginConfig.label, process.env.LABEL),
        logFormat: pluginConfig.logFormat || process.env.LOG_FORMAT,
        logTimestamp: toBoolean(pluginConfig.logTimestamp || process.env.LOG_TIMESTAMP),
        noPush: toBoolean(pluginConfig.noPush || process.env.NO_PUSH),
        noPushCache: toBoolean(pluginConfig.noPushCache || process.env.NO_PUSH_CACHE),
        ociLayoutPath: pluginConfig.ociLayoutPath || process.env.OCI_LAYOUT_PATH,
        pushIgnoreImmutableTagErrors: toBoolean(pluginConfig.pushIgnoreImmutableTagErrors || process.env.PUSH_IGNORE_IMMUTABLE_TAG_ERRORS),
        pushRetry: parseInt(pluginConfig.pushRetry || process.env.PUSH_RETRY),
        registryCertificate: JSON.parse(pluginConfig.registryCertificate, process.env.REGISTRY_CERTIFICATE),
        registryClientCert: JSON.parse(pluginConfig.registryClientCert, process.env.REGISTRY_CLIENT_CERT),
        registryMap: JSON.parse(pluginConfig.registryMap, process.env.KANIKO_REGISTRY_MAP),
        registryMirror: parseArrayOrString(pluginConfig.registryMirror, process.env.REGISTRY_MIRROR),
        reproducible: toBoolean(pluginConfig.reproducible || process.env.REPRODUCIBLE),
        singleSnapshot: toBoolean(pluginConfig.singleSnapshot || process.env.SINGLE_SNAPSHOT),
        skipDefaultRegistryFallback: toBoolean(pluginConfig.skipDefaultRegistryFallback || process.env.SKIP_DEFAULT_REGISTRY_FALLBACK),
        skipPushPermissionCheck: toBoolean(pluginConfig.skipPushPermissionCheck || process.env.SKIP_PUSH_PERMISSION_CHECK),
        skipTlsVerify: toBoolean(pluginConfig.skipTlsVerify || process.env.SKIP_TLS_VERIFY),
        skipTlsVerifyPull: toBoolean(pluginConfig.skipTlsVerifyPull || process.env.SKIP_TLS_VERIFY_PULL),
        skipTlsVerifyRegistry: parseArrayOrString(pluginConfig.skipTlsVerifyRegistry, process.env.SKIP_TLS_VERIFY_REGISTRY),
        skipUnusedStages: toBoolean(pluginConfig.skipUnusedStages || process.env.SKIP_UNUSED_STAGES),
        snapshotMode: pluginConfig.snapshotMode || process.env.SNAPSHOT_MODE,
        tarPath: pluginConfig.tarPath || process.env.TAR_PATH,
        target: pluginConfig.target || process.env.TARGET,
        useNewRun: toBoolean(pluginConfig.useNewRun || process.env.USE_NEW_RUN),
        verbosity: pluginConfig.verbosity || process.env.VERBOSITY,
    };
}
